#!/usr/bin/env python

# Copyright 2015 Samsung Electronics Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#  This file converts src/js/iotjs.js to a C-array in include/iotjs_js.h file

import sys
import glob
import os
import re
import subprocess

def extractName(path):
    return os.path.splitext(os.path.basename(path))[0]

def writeLine(fo, content, indent=0):
    buf = '  ' * indent
    buf += content
    buf += '\n'
    fo.write(buf)

def regroup(l, n):
    return [ l[i:i+n] for i in range(0, len(l), n) ]

LICENSE = '''/* Copyright 2015 Samsung Electronics Co., Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the \"License\");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an \"AS IS\" BASIS
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * This file is generated by tools/js2c.py
 * Do not modify this.
 */
'''

HEADER = '''#ifndef IOTJS_JS_H
#define IOTJS_JS_H
namespace iotjs {
'''
FOOTER = '''}
#endif
'''

# FIXME
DUMPER = '../deps/jerry/build/bin/debug.linux/jerry'
if os.path.isfile(DUMPER) == False:
    os.chdir('../deps/jerry')
    subprocess.call(["make", "debug.linux"])
    os.chdir('../../src')

SRC_PATH = '../src/'
JS_PATH = SRC_PATH + 'js/'


# argument processing
buildtype = 'debug'
if len(sys.argv) >= 2:
    buildtype = sys.argv[1]


fout = open(SRC_PATH + 'iotjs_js.h', 'w')

fout.write(LICENSE);
fout.write(HEADER);

files = glob.glob(JS_PATH + '*.js')
for path in files:
    name = extractName(path)
    fout.write('const char ' + name + '_n [] = "' + name + '";\n')
    fout.write('const unsigned char ' + name + '_s [] = {\n')

    fmodule = open(path, 'r')
    module = fmodule.read()
    fmodule.close()

    fmodule_wrapped = open(path + '.wrapped', 'w')
    # FIXME
    if name != 'iotjs':
      fmodule_wrapped.write ("(function (a, b, c) {\n")
      fmodule_wrapped.write ("function wwwwrap(exports, require, module) {\n");

    fmodule_wrapped.write (module)

    if name != 'iotjs':
      fmodule_wrapped.write ("};\n");
      fmodule_wrapped.write ("wwwwrap(a, b, c); });\n")
    fmodule_wrapped.close()

    # FIXME
    ret = subprocess.call([DUMPER,
                          '--dump-snapshot-for-eval',
                          path + '.snapshot',
                          path + '.wrapped'])
    if ret != 0:
        msg = 'Failed to dump ' + path + (": - %d]" % (ret))
        print "%s%s%s" % ("\033[1;31m", msg, "\033[0m")
        exit(1)

    code = open(path + '.snapshot', 'r').read()

    os.remove (path + '.wrapped')
    os.remove (path + '.snapshot')

    for line in regroup(code, 8):
        buf = ', '.join(map(lambda ch: "0x{:02x}".format(ord(ch)), line))
        buf += ','
        writeLine(fout, buf, 1)
    writeLine(fout, '};')
    writeLine(fout, 'const int ' + name + '_l = sizeof (' + name + '_s);')

NATIVE_STRUCT = '''
struct native_mod {
  const char* name;
  const void* snapshot;
  const size_t length;
};

__attribute__ ((used)) static struct native_mod natives[] = {
'''
fout.write(NATIVE_STRUCT)
filenames = map(extractName, files)
for name in filenames:
    writeLine(fout, '{ ' + name + '_n, ' + name + '_s, ' + name + '_l },', 1)
writeLine(fout, '{ NULL, NULL, 0 }', 1)
writeLine(fout, '};')

fout.write(FOOTER)
